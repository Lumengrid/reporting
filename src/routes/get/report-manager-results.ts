import { NextFunction, Request, Response } from 'express';
import httpContext from 'express-http-context';
import { SessionLoggerService } from '../../services/logger/session-logger.service';
import SessionManager from '../../services/session/session-manager.session';
import { DataLakeRefreshStatus, ErrorsCode, GeneralErrorResponse } from '../../models/base';
import { GetQueryExecutionOutput } from 'aws-sdk/clients/athena';
import { BasePaginateResultResponse, ExportStatuses } from '../../models/report-manager';
import { ReportExtractionDetails, ReportExtractionInfo } from '../../services/dynamo';
import moment from 'moment';
import { DEFAULT_PAGE_SIZE } from '../../shared/constants';
import { ReportExportComponent } from './report-export.component';
import { ExtractionComponent } from '../../models/extraction.component';
import { LastRefreshDate } from '../../reports/interfaces/extraction.interface';
import { ReportManagerComponent } from '../../shared/components/report-manager.component';

/**
 * @category Manager
 * @summary Get report manager results paginated
 * @method GET
 * @get report_type_code [string, required] Report type code
 * @get query_execution_id [string, required] Query execution id
 * @url /analytics/v1/manager/report/{report_type_code}/{query_execution_id}/results
 *
 * @parameter pageSize [integer, optional] Maximum number of results per page, min 1 and max 1000
 * @parameter nextToken [string, optional] Token generated by the Athena service that specifies where to continue pagination
 *
 * @response success [boolean, required] Whether or not the operation was successful
 * @response data [array(object), required] Array of results object
 * @response nextToken [string, required] A token generated by the Athena service that specifies where to continue pagination
 * @end
 * @status 404 Not found
 */
export const reportManagerResults = async (req: Request, res: Response, next: NextFunction) => {
    const logger: SessionLoggerService = httpContext.get('logger');
    const session: SessionManager = res.locals.session;
    const reportTypeCode = req.params.report_type_code;
    const queryExecutionId = req.params.query_execution_id;
    const responseOptions: BasePaginateResultResponse = {success: true};
    const nextToken: string | undefined = req.query.nextToken ? req.query.nextToken.toString() : undefined;
    let pageSize: number | undefined = req.query.pageSize ? parseInt(req.query.pageSize.toString()) : DEFAULT_PAGE_SIZE;
    res.type('application/json');

    // this is a known bug of athena, if there isn't a nextToken the page size must increment 1
    if (typeof nextToken === 'undefined') {
        pageSize = pageSize + 1;
    }
    const dynamo = session.getDynamo();

    let extraction: ReportExtractionInfo;
    try {
        extraction = await dynamo.getReportExtraction(reportTypeCode, queryExecutionId);
    } catch (error: any) {
        logger.errorWithStack('Error on recover report extraction', error);
        res.type('application/json');
        res.status(404);
        res.json(new GeneralErrorResponse('Extraction not found', ErrorsCode.ExtractionNotExist));
        return;
    }
    const info = new ReportExtractionDetails(extraction);
    const reportManagerComponent = new ReportManagerComponent(session);

    if (info.status === ExportStatuses.FAILED) {
        reportManagerComponent.dropTemporaryTable(extraction.managerSubordinatesTable);
        res.type('application/json');
        res.status(400);
        res.json(new GeneralErrorResponse('Extraction download failed', ErrorsCode.ExtractionFailed));

        return;
    }

    let refreshInfo: LastRefreshDate;
    const extractionComponent = new ExtractionComponent();
    const athena = session.getAthena();

    try {
        refreshInfo = await extractionComponent.getDataLakeLastRefresh(session);
    } catch (e: any) {
        // nothing to do for now
    }

    refreshInfo = await extractionComponent.startDataLakeRefreshIfStatusIsError(session, refreshInfo);

    if (session.platform.isDatalakeV2Active() && extraction.extraction_id === extraction.queuedExtractionID) {
        // Check if the refresh if completed and in case start the query on Athena
        if (refreshInfo.refreshStatus !== DataLakeRefreshStatus.RefreshInProgress) {
            const athena = session.getAthena();
            const exportComponent = new ReportExportComponent(req, session, extraction.hostname, extraction.subfolder, false, extraction.type, false, extraction.enableFileCompression);
            const data = await athena.runCSVExport(extraction.query);
            extraction.query = undefined;
            extraction.queuedExtractionID = data.QueryExecutionId;
            await dynamo.createOrEditReportExtraction(extraction);
        }

        res.type('application/json');
        res.status(400);
        res.json(new GeneralErrorResponse('Extraction download not ready', ErrorsCode.ExtractionNotComplete));

        return;
    }

    // If the extraction status wasn't in succeeded status, we check again the query execution status
    if (info.status !== ExportStatuses.SUCCEEDED) {
        const athena = session.getAthena();
        const status = await athena.checkQueryStatus(extraction.queuedExtractionID ?? queryExecutionId) as GetQueryExecutionOutput;
        const queryExecutionStatus = status && status.QueryExecution && status.QueryExecution.Status ? status.QueryExecution.Status.State : '';
        if (queryExecutionStatus !== ExportStatuses.SUCCEEDED) {
            res.type('application/json');
            res.status(400);
            res.json(new GeneralErrorResponse('Extraction download not ready', ErrorsCode.ExtractionNotComplete));

            return;
        } else {
            extraction.status = ExportStatuses.SUCCEEDED;
            const dateEnd = new Date();
            extraction.date_end = moment(dateEnd).format('YYYY-MM-DD HH:mm:ss');

            reportManagerComponent.dropTemporaryTable(extraction.managerSubordinatesTable);
            extraction.managerSubordinatesTable = undefined;

            await dynamo.createOrEditReportExtraction(extraction);
        }
    }

    if (info.getDaysElapsed() > 30) {
        res.type('application/json');
        res.status(404);
        res.json(new GeneralErrorResponse('Extraction download not found', ErrorsCode.ExtractionNotExist));
        return;
    }

    try {
        const athena = session.getAthena();
        const results = await athena.getQueryResult(extraction.queuedExtractionID ?? queryExecutionId, pageSize, nextToken);

        responseOptions.data = athena.getQueryResultsAsArray(results);
        responseOptions.nextToken = results.NextToken;
        res.status(200);
    } catch (e: any) {
        responseOptions.success = false;
        responseOptions.error = e.message;
        logger.errorWithStack(`Error while getting results of report manager (idReport: ${reportTypeCode}, exportId: ${queryExecutionId}).`, e);
        responseOptions.error = 'Generic error. See the logs for more information';
        res.status(500);
    }
    res.json(responseOptions);
};
